{"name":"Vreditor-windows","tagline":"","body":"### Project Idea\r\n\r\nThe project will focus on exploring the possibility of editing text in VR. That said, we will use Unity as our engine. On top of unity we will build the experience around three major components:\r\n\r\n### Novelty\r\n\r\nThere are a lot of VR demos out there, but we haven’t seen many that explores the experience of text editing in VR. Many programmers prefer to work with two monitors and we’ve seen a matrix of 9 monitors at an investment banker’s desk. Working in VR makes use of the free, unlimited space. During our research we came across related projects as follows:\r\n \r\nIbex: inserts your desktop in an outdoors scene\r\nmOculus: maya plugin that renders the model as well as display the editor in VR space\r\nRiftSketch: Live coding Javascript and Three.js (WebGL/WebVR)\r\n\r\nBut none of the existing projects have been able to open up infinite numbers of text editors, or be able to switch the surrounding environment for the VR workstation. \r\n\r\n### Technical Challenges\r\n\r\n####Text editor:\r\n\r\nHow do we take the basic functionalities in an editor - opening/saving/closing a file, multiple windows, consoles, switching between windows - and make it feel natural and superior in VR\r\n\r\n####Environment:\r\n\r\n*One of the challenge we encounter is how to switch environment for the player.\r\n\r\n*Another challenge is what type of environment we want, should it be a terrain with bunch of lightnings and objects or should it be just a sky box and where could we get those environments?\r\n\r\n*What kind of background makes the user most efficient? It could be a lakeside cabin or a trippy wormhole. Maybe helpful for writing novels.\r\n\r\n####User interface:\r\nBeyond keyboard shortcuts, what are some interfaces we can adopt that will enhance the VR experience?\r\nEg. if we have a console we can have the console follow head tracking, whereas the editor stay at their positions.\r\n\r\n### What Works Well\r\n\r\n####Text editor:\r\nPress command+space and launch a spotlight search bar to quickly search/open files, websites\r\n####Environment:\r\n*We \r\n*\r\n*\r\n####User interface:\r\n\r\nswitch the surrounding environment  \r\n\r\n\r\n### Ideas for Future Work\r\n#### 3D Sound\r\n####full-featured text editor.\r\n####Search Bar Suggestion\r\n\r\n### What Fails\r\n\r\n### Why it's a comfortable experience\r\nWe try to make this to be as comfortable as possible by follow most of the the Oculus Best Practices\r\nAllow the user to edit in the environment for potentially extended time. We intend to follow most of the Oculus Best Practices.\r\n\r\n### How we use the course concepts\r\n\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}